
Banking API
-----------
	This application is used to simulate banking financial systems present in our society.

Below roles are present in this system.
	# ROLE_CUSTOMER

ROLE_CUSTOMER
-------------
	Users with this role can
        # update their password, delete their account.
        # can perform transactions of type deposit, withdraw and transfer on their accounts.

Tables
------
	# role
	# user
	# user_role
	# transaction

role
	rolename

user
	username
	password
	balance
	created_time

user_role
	username
	rolename

transaction
  id
  type
  amount
  from
  to
  created_time
  status
  message

DROP TABLE transaction;
DROP TABLE user_role;
DROP TABLE user;
DROP TABLE role;

CREATE TABLE role
(
    rolename VARCHAR(128),
	CONSTRAINT pk_role PRIMARY KEY(rolename)
);

INSERT INTO role(rolename) VALUES("ROLE_BANKER");
INSERT INTO role(rolename) VALUES("ROLE_CUSTOMER");

CREATE TABLE user
(
	username VARCHAR(128),
	password VARCHAR(128) NOT NULL,
	balance BIGINT DEFAULT 0 NOT NULL,
	created_time TIMESTAMP NOT NULL,
	last_updated_time TIMESTAMP,

	CONSTRAINT pk_user PRIMARY KEY(username)
);

CREATE TABLE user_role
(
	username VARCHAR(128),
	rolename VARCHAR(128),
	
	CONSTRAINT pk_user_role PRIMARY KEY(username, rolename),
	CONSTRAINT fk_user_role__user FOREIGN KEY(username) REFERENCES user(username),
	CONSTRAINT fk_user_role__role FOREIGN KEY(rolename) REFERENCES role(rolename)
);

CREATE TABLE transaction
(
	id BIGINT AUTO_INCREMENT,
	type VARCHAR(128) NOT NULL,
	amount BIGINT NOT NULL,
	from_user VARCHAR(128),
	to_user VARCHAR(128),
	created_time TIMESTAMP NOT NULL,
	status VARCHAR(128) NOT NULL,
	message VARCHAR(1024),
	
	CONSTRAINT pk_transaction PRIMARY KEY(id),
	CONSTRAINT ck_transaction__type CHECK(type in ("DEPOSIT", "WITHDRAW", "TRANSFER")),
	CONSTRAINT fk_transaction__user__from FOREIGN KEY(from_user) REFERENCES user(username),
	CONSTRAINT fk_transaction__user__to FOREIGN KEY(to_user) REFERENCES user(username),
	CONSTRAINT ck_transaction__status CHECK(status in ("SUCCEDED", "FAILED"))
);

alter table banking.transaction AUTO_INCREMENT=1000000000;

Customer Operations
-------------------

	A customer can create any number of bank accounts but only one account per each bank.

		POST https://localhost:8080/banking/api/v1/customers/register
			-- username
			-- password
	
			Above operation is used to create a new customer with default balance 0.

	    Get https://localhost:8080/banking/api/v1/customers

    			Above operation is used to get a customer's details.

		PUT https://localhost:8080/banking/api/v1/customers
			-- password

			Above operation is used to update a customer's password. A customer can update his/her password only.

		DELETE https://localhost:8080/banking/api/v1/customers
	
			Above operation is used to delete a customer's account. A customer can delete his/her account only.
			A customer can not be deleted if he / she has balance other than 0.


Transaction Operations
----------------------

	A transaction can be withdraw, deposit or transfer type.

		POST https://localhost:8080/banking/api/v1/customers/transactions
			-- type
			-- amount
			-- from
			-- to
	
			Above operation is used to create a transactions which belongs to the authenticated customer.

		GET https://localhost:8080/banking/api/v1/customers/transactions
	
			Above operation is used to get all transactions which belong to the authenticated customer.

	 	GET https://localhost:8080/banking/api/v1/customers/transactions/{id}
	 		
	 		Above operation is used to get details of a transaction which belongs to the authenticated customer.




