openapi: 3.0.1

info:
  title: Banking API
  description: 'This application is used to simulate financial banking systems present in our society.'
  contact:
    name: Vinod Parlapalli
    email: parlapallivinod@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: http://localhost:8080/banking/api
    description: Local server

paths:
  /v1/customers/registration:
    post:
      tags:
        - customers
      summary: Register a new customer
      operationId: registerCustomer
      requestBody:
        description: Customer object that need to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Customer registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request (Request Parameters validation error or Customer already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/customers:
    get:
      tags:
        - customers
      summary: Get customer details related to basic authetication header sent.
      description: Returns customer details related to basic authetication header sent.
      operationId: getCustomer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      security:
        - basicAuth: []
    put:
      tags:
        - customers
      summary: Update customer password related to basic authetication header sent.
      operationId: updateCustomerPassword
      requestBody:
        description: Customer object that needs it's password to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Customer password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request (Request Parameters validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      security:
        - basicAuth: []
    delete:
      tags:
        - customers
      summary: Delete customer related to basic authetication header sent.
      operationId: deleteCustomer
      responses:
        204:
          description: Customer deleted successfully
          content: {}
        400:
          description: Bad Request (Customer, with non zero balance, cannot be deleted)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      security:
        - basicAuth: []
  /v1/customers/transactions:
    get:
      tags:
        - transactions
      summary: Get transactions
      description: Get transactions related to to basic authetication header sent with pagination.
      operationId: getTransactions
      parameters:
        - name: pageNumber
          in: query
          description: pageNumber
          required: false
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: pageSize
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedTransactions'
        400:
          description: Bad Request (Invalid pageNumber, pageSize)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      security:
        - basicAuth: []
    post:
      tags:
        - transactions
      summary: Perform a transaction
      operationId: performTransaction
      requestBody:
        description: Transactin that need to be performed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        201:
          description: Transaction performed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      security:
        - basicAuth: []


components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 16
        password:
          type: string
          minLength: 5
          maxLength: 16
        balance:
          type: integer
          format: int64
          default: 0
        createdTime:
          type: string
          format: date-time
        lastUpdatedTime:
          type: string
          format: date-time
    Transaction:
      type: object
      required:
        - type
        - amount
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: Transaction type
          enum:
            - DEPOSIT
            - WITHDRAW
            - TRANSFER
        amount:
          type: integer
          format: int64
          minimum: 1
        fromUser:
          $ref: '#/components/schemas/User'
        toUser:
          $ref: '#/components/schemas/User'
        status:
          type: string
          description: Transaction status
          enum:
            - SUCCESS
            - FAILURE
        message:
          type: string
        createdTime:
          type: string
          format: date-time
    PaginatedTransactions:
      type: object
      required:
        - totalTransactions
        - pageSize
        - totalPages
        - pageNumber
        - numberOfTransactions
        - transactions
      properties:
        totalTransactions:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        numberOfTransactions:
          type: integer
          format: int32
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    ErrorResponse:
      type: object
      required:
        - message
        - details
      properties:
        message:
          type: string
        details:
          type: array
          items:
            type: string
    UnauthorizedResponse:
      type: object
      required:
        - status
        - error
        - message
        - path
        - timestamp
      properties:
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
        timestamp:
          type: string
          format: date-time
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

